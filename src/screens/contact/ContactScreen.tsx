/* eslint-disable react-native/no-inline-styles */
import {Button, Input, Section, Space} from '@bsdaoquang/rncomponent';
import React, {useState} from 'react';
import {TouchableOpacity} from 'react-native';
import Toast from 'react-native-toast-message';
import Ionicons from 'react-native-vector-icons/Ionicons';
import {Container, TextComponent} from '../../components';
import {colors} from '../../constants/colors';
import {fontFamilies} from '../../constants/fontFamilies';
import {ContactModel} from '../../constants/models';
import {insertContact} from '../../lib/actions';
import {validateEmail, validatePhoneNumber} from '../../utils/helper';

const initialValue: ContactModel = {
  name: '',
  email: '',
  phone: '',
  content: '',
};

const ContactScreen = ({navigation}: any) => {
  const [contactForm, setContactForm] = useState<ContactModel>(initialValue);
  const [errorMessages, setErrorMessages] =
    useState<ContactModel>(initialValue);
  const [resetKey, setResetKey] = useState(0);

  const validateFields = () => {
    const errors = {...initialValue};
    let isValid = true;

    if (contactForm.name.length < 5) {
      errors.name = 'T√™n ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±';
      isValid = false;
    }
    if (!validateEmail(contactForm.email)) {
      errors.email = 'Email kh√¥ng h·ª£p l·ªá';
      isValid = false;
    }
    if (!validatePhoneNumber(contactForm.phone)) {
      errors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
      isValid = false;
    }
    if (contactForm.content.length < 10) {
      errors.content = 'N·ªôi dung ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±';
      isValid = false;
    }

    setErrorMessages(errors);
    return isValid;
  };

  const handleChangeVal = (key: string, value: string) => {
    if (!key || !value) {
      return;
    }

    const items: any = {...contactForm};
    items[`${key}`] = value;
    setContactForm(items);
  };

  const handleSubmit = async () => {
    if (!validateFields()) {
      Toast.show({
        type: 'error',
        text1: 'Th√¥ng b√°o',
        text2: errorMessages.email
          ? errorMessages.email
          : errorMessages.name
          ? errorMessages.name
          : errorMessages.content
          ? errorMessages.content
          : errorMessages.phone,
      });
      return;
    }

    try {
      const {error} = await insertContact(contactForm);
      if (error) {
        throw new Error(error);
      }

      setContactForm(initialValue);
      setErrorMessages(initialValue);
      setResetKey(prev => prev + 1);
      Toast.show({
        type: 'success',
        text1: 'Th√¥ng b√°o',
        text2: 'G·ª≠i th√¥ng tin th√†nh c√¥ng! C·∫£m ∆°n ƒë√≥ng g√≥p √Ω ki·∫øn c·ªßa b·∫°n!',
      });
    } catch (error) {
      Toast.show({
        type: 'error',
        text1: 'Th√¥ng b√°o',
        text2: error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra',
      });
    }
  };

  return (
    <Container
      title="Li√™n h·ªá"
      back={
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="chevron-back" size={24} color={colors.white} />
        </TouchableOpacity>
      }>
      <Section styles={{marginTop: 20}}>
        <TextComponent
          size={24}
          styles={{textAlign: 'center'}}
          text="Li√™n h·ªá v·ªõi ch√∫ng t√¥i"
        />
        <Space height={4} />
        <TextComponent
          size={16}
          styles={{textAlign: 'center'}}
          text="N·∫øu b·∫°n c√≥ b·∫•t k√¨ c√¢u h·ªèi hay th·∫Øc m·∫Øc n√†o ho·∫∑c mu·ªën li√™n h·ªá v·ªõi d·ªãch v·ª• c·ªßa ch√∫ng t√¥i, ƒë·ª´ng ng·∫ßn ng·∫°i cung c·∫•p th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n m·ªôt c√°ch s·ªõm nh·∫•tüíï"
        />
      </Section>

      <Section key={resetKey}>
        <Input
          radius={10}
          clear
          required
          helpText={'H√£y nh·∫≠p t√™n'}
          inputStyles={{fontFamily: fontFamilies.mergeRegular}}
          placeholderColor={colors.grey4}
          value={contactForm.name}
          placeholder="Nh·∫≠p h·ªç t√™n"
          onChange={val => handleChangeVal('name', val)}
        />
        <Input
          radius={10}
          clear
          required
          helpText={errorMessages.email || 'H√£y nh·∫≠p email'}
          value={contactForm.email}
          inputStyles={{fontFamily: fontFamilies.mergeRegular}}
          placeholderColor={colors.grey4}
          placeholder="Nh·∫≠p email"
          onChange={val => handleChangeVal('email', val)}
        />
        <Input
          radius={10}
          clear
          required
          keyboardType="phone-pad"
          helpText={errorMessages.phone || 'H√£y nh·∫≠p s·ªë ƒëi·ªán tho·∫°i'}
          value={contactForm.phone}
          placeholderColor={colors.grey4}
          inputStyles={{fontFamily: fontFamilies.mergeRegular}}
          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
          onChange={val => handleChangeVal('phone', val)}
        />
        <Input
          radius={10}
          clear
          value={contactForm.content}
          required
          helpText={'H√£y nh·∫≠p n·ªôi dung'}
          placeholderColor={colors.grey4}
          inputStyles={{fontFamily: fontFamilies.mergeRegular}}
          placeholder="Nh·∫≠p n·ªôi dung"
          textAreal
          onChange={val => handleChangeVal('content', val)}
        />
        <Button
          textStyleProps={{fontFamily: fontFamilies.mergeBold}}
          color={colors.red}
          title="G·ª≠i"
          onPress={handleSubmit}
        />
      </Section>
    </Container>
  );
};

export default ContactScreen;
